import{_ as s,o as a,c as n,V as o}from"./chunks/framework.7ae304b1.js";const h=JSON.parse('{"title":"API framework","description":"","frontmatter":{},"headers":[],"relativePath":"apps/api.md","filePath":"apps/api.md"}'),e={name:"apps/api.md"},l=o(`<h1 id="api-framework" tabindex="-1">API framework <a class="header-anchor" href="#api-framework" aria-label="Permalink to &quot;API framework&quot;">​</a></h1><p>First of all, a Pinokio API is nothing more than <strong>a mapping from JSON-RPC to a JavaScript function call.</strong></p><h2 id="rules" tabindex="-1">Rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;Rules&quot;">​</a></h2><p>To build your own API, you need to follow the convention expected by the Pinokio API framework.</p><p>All Pinokio functions must take the following form:</p><ol><li>Every API should be stored under its own uniquely named folder under <code>~/pinokio/api</code>.</li><li>The API file must be a JavaScript class with <code>index.js</code> as its filename.</li><li>The JavaScript class must have one or more methods. The method names are important since they will be used in JSON-RPC calls.</li><li>The methods must follow a specific function signature convention expected by the Pinokio API framework</li></ol><h2 id="api-class" tabindex="-1">API Class <a class="header-anchor" href="#api-class" aria-label="Permalink to &quot;API Class&quot;">​</a></h2><p>Let&#39;s say we want to create an API that takes a JSON-RPC request like this:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>and returns the same value <code>params.text</code> (<code>&quot;hello world&quot;</code>).</p><p>To accomplish this, we just need to write a JavaScript class and a method that looks something like this:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ondata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">kernel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Echo</span></span></code></pre></div><ol><li>The name of the class (<code>Echo</code> in this example) here is not important and you can name it whatever you want.</li><li>But the path to which you store the file IS important (during development). In this case, since we want to reference it using the <code>&quot;uri&quot;: &quot;echo&quot;</code> attribute, we need to store the file under <code>~/pinokio/api/echo/index.js</code> (It MUST be named <code>index.js</code> since this is the default name used by node.js to import modules)</li><li>The folder name is important during development, but becomes irrelevant once you publish the repository to the public. This is because people will use your API using the public HTTP git URI (such as <code>https://github.com/cocktailpeanut/llama.git/index.js</code>) instead of your local relative path.</li></ol><p>For example, I may publish the <code>Echo</code> API at <code>https://github.com/cocktailpeanut/echo.git</code>, and anyone will be download the API and use the following RPC command to use the API:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/cocktailpeanut/echo.git/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="api-method" tabindex="-1">API Method <a class="header-anchor" href="#api-method" aria-label="Permalink to &quot;API Method&quot;">​</a></h2><p>Each method must follow the protocol (must have a specific function signature):</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">async</span><span style="color:#A6ACCD;"> (request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ondata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> kernel) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1. do something with the request (the JSON-RPC payload)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 2. use ondata() to send realtime updates during execution </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 3. use kernel to access some kernel level attributes and methods</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 4. finally, return a value (in case this API has a return value)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Let&#39;s walk through each parameter one by one:</p><ol><li>request</li><li>ondata</li><li>kernel</li></ol><h3 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h3><p>The <code>request</code> object is used to utilize the JSON-RPC request object as well as some additional information.</p><ul><li><code>request</code>: The JSON-RPC request object, along with some additional metadata attached by the Pinokio processor <ul><li><code>uri</code>: The request destination URI</li><li><code>method</code>: The request method</li><li><code>params</code>: The request parameter. This is the attribute that&#39;s used most frequently to implement APIs</li><li><code>returns</code>: If specified in the original request, the variable name to which to assign the return value</li><li><code>dirname</code>: The absolute path of the folder that contains the API file (For example, <code>~/pinokio/api/utils</code>)</li><li><code>cwd</code>: The absolute path of the folder from which the script is being run. The difference from <code>dirname</code> is that <code>cwd</code> is the folder path of the run script that&#39;s currently calling this API, whereas the <code>dirname</code> is the folder path of the API file itself. Similar to the difference between <a href="https://www.tutorialspoint.com/difference-between-process-cwd-and-dirname-in-nodejs" target="_blank" rel="noreferrer">process.cwd() and __dirname in node.js</a></li><li><code>root</code>: The uri of the currnetly running Pinokio script file.</li><li><code>current</code>: The current instruction index within the <code>run</code> array.</li><li><code>next</code>: The next instruction index within the <code>run</code> array. <code>null</code> if the current instruction is the last step in the <code>run</code> array.</li></ul></li></ul><h3 id="ondata" tabindex="-1">ondata <a class="header-anchor" href="#ondata" aria-label="Permalink to &quot;ondata&quot;">​</a></h3><p>The <code>ondata()</code> callback function is used to emit events while the API is running.</p><p>Often (especially when using AI engines), a single API call may take a while to finish, and it is useful to be able to notify the realtime progress update to the client.</p><p>You can call the <code>ondata()</code> callback to trigger these events.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">ondata</span><span style="color:#A6ACCD;">(data)</span></span></code></pre></div><ul><li><code>data</code>: the raw data stream (string). may includes the following attributes: <ul><li><code>raw</code>: The raw string (can include ANSI characters and escape sequences, and translates 1:1 to a terminal display). Emit this attribute if you need to display escape sequences in the terminal.</li><li><code>cleaned</code>: The cleaned version of the raw string. When all you need is the data, you can use the <code>cleaned</code> version (all ANSI escape sequences stripped out)</li></ul></li></ul><p>Here&#39;s an example where you can call &quot;say&quot; and it will emit a &quot;hello&quot; event every 1 second, and return &quot;finished&quot; at the end.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">say</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ondata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">kernel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// wait 1 second</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// emit &quot;hello &quot; + i event</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">ondata</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> raw</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">finished</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Hello</span></span></code></pre></div><p>Try saving above file under <code>~/pinokio/api/hello/index.js</code>, and then create an example run script at <code>~/pinokio/api/hello/example.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">say</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>And when you run the <code>example.json</code> script, it will print &quot;hello&quot; to the terminal every 1 second, and after 10 seconds it will return &quot;finished&quot; and halt.</p><h3 id="kernel" tabindex="-1">kernel <a class="header-anchor" href="#kernel" aria-label="Permalink to &quot;kernel&quot;">​</a></h3><p>Often, the RPC request won&#39;t be enough to carry out a task. For example you may need to access some low level methods or attributes.</p><p>You can use the <code>kernel</code> variable for this. Since the kernel object essentially gives you full access to the entire Pinokio operating system, I can&#39;t mention everything, but here are some notable modules worth looking at:</p><ul><li><code>kernel</code><ul><li><a href="./shell.html#shell"><code>sh()</code></a>: returns a new shell object</li><li><code>api</code>: the <code>api</code> object (manages everything api related)</li><li>...</li></ul></li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><h3 id="api-with-git-uri" tabindex="-1">API with git URI <a class="header-anchor" href="#api-with-git-uri" aria-label="Permalink to &quot;API with git URI&quot;">​</a></h3><p>Let&#39;s imagine a simple script that contains one instruction:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/cocktailpeanut/llama.git/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">### Instruction</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">Write a brief controversial opinion.</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">### Response</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../models/stable-vicuna/13b_q4_0.bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">256</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>The first thing Pinokio does is figuring out which module and its method the <code>uri</code> resolves to, according to the <a href="./../fs/uri.html#http-path">URI resolution convention</a>.</p><p>A git uri is made up of two components:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;remote git URI&gt;/&lt;relative path&gt;</span></span></code></pre></div><p>In the example above,</p><ol><li>The <code>https://github.com/cocktailpeanut/llama.git</code> part is the <code>&lt;remote git URI&gt;</code></li><li>The <code>index.js</code> part is the <code>&lt;relative path&gt;</code></li></ol><p>The actual algorithm:</p><ol><li><strong>Begin URI parsing:</strong> Pinokio sees the uri <code>https://github.com/cocktailpeanut/llama.git/index.js</code></li><li><strong>Git uri extraction:</strong> the git repository uri is extracted from the full uri: <code>https://github.com/cocktailpeanut/llama.git</code></li><li><strong>Git config match:</strong> Pinokio checks if there is any top level folder under <code>~/pinokio/api</code> whose <code>.git/config</code> includes the matching remote URL <code>https://github.com/cocktailpeanut/llama.git</code> (This would imply that the folder has been downloaded from a remote git repository available at the URL)</li><li><strong>Endpoint resolution:</strong> If there&#39;s a match (let&#39;s say it finds one at <code>~/pinokio/api/llama</code>), the resolution is complete, and the request is routed to the module inside the matched local folder (<code>~/pinokio/api/llama</code>).</li><li><strong>Route resolution:</strong> Now that the endpoint has been resolved, Pinokio looks at the <code>&lt;relative path&gt;</code> part of the full URI. In this case it&#39;s <code>index.js</code>. Pinokio takes the resolved endpoint path from the previous step (<code>~/pinokio/api/llama</code>) and resolves the rest of the file path <code>index.js</code>, and ends up with the full local path <code>~/pinokio/api/llama/index.js</code>.</li><li><strong>Method resolution:</strong> Pinokio then looks at the JavaScript class file <code>~/pinokio/api/llama/index.js</code> and finds the method <code>run</code></li><li><strong>Method Execution:</strong> Now that Pinokio knows which method inside which file needs to be executed, the only thing left is to actually execute the method by passing the <code>params</code> attribute.</li></ol><p>The <code>~/pinokio/api/llama/index.js</code> must follow the <a href="./../apps/api.html#api-framework">API framework convention</a>, and may look something like this:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Llama</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ondata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">kernel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do stuff with the request.params</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Llama</span></span></code></pre></div><p>The <code>request</code> parameter will contain:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  uri</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;https:</span><span style="color:#676E95;font-style:italic;">//github.com/malfunctionize/llama.git/index.js&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  method: &#39;run&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      p</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">### Instruction</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">Write a brief controversial opinion.</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">### Response</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      m</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;../models/stable-vicuna/</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">b_q</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">_</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.bin&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">256</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  dirname</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;/Users/x/pinokio/api/llama&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  cwd</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;/Users/x/pinokio/api/llama/example&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> &#39;https:</span><span style="color:#676E95;font-style:italic;">//github.com/malfunctionize/llama.git/example/stable-vicuna-13b-q4_0.json&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  current: </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  next</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li><code>uri</code>: the full endpoint URI from the <strong>begin URI parsing</strong> step.</li><li><code>method</code>: the RPC method passed in.</li><li><code>params</code>: the RPC params passed in.</li><li><code>dirname</code>: the resolved local path from the <strong>endpoint resolution</strong> step. This is the path under which the resolved module exists</li><li><code>cwd</code>: the current execution path. This is the folder that contains the script that is running currently.</li><li><code>root</code>: the full path for the script file that is currently running.</li><li><code>current</code>: The current instruction index within the <code>run</code> array. In this case it&#39;s 0 since it&#39;s the first instruction in the <code>run</code> array.</li><li><code>next</code>: The next instruction index to be executed after the current request ends. In this case it&#39;s <code>null</code> since there is only one item in the <code>run</code> array (the current instruction), and <code>null</code> means the program will halt after this step.</li></ol><h3 id="api-with-relative-path" tabindex="-1">API with relative path <a class="header-anchor" href="#api-with-relative-path" aria-label="Permalink to &quot;API with relative path&quot;">​</a></h3><p>Now let&#39;s imagie the same script, but with relative path as its URI, instead of the remote git URI.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">llama/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">### Instruction</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">Write a brief controversial opinion.</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#C3E88D;">### Response</span><span style="color:#A6ACCD;">\\n\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../models/stable-vicuna/13b_q4_0.bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">256</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Note that the <code>uri</code> is a relative path, which means it will be resolved to <code>~/pinokio/api/llama/index.js</code> according to the <a href="./../fs/uri.html#relative-path">URI resolution convention</a>.</p><p>In this case there is no need for git URI resolution, since Pinokio simply needs to reach into the file that exists at the path <code>~/pinokio/api/llama/index.js</code>.</p><p>The rest of the resolution and execution logic is the same as the previous section.</p>`,60),t=[l];function p(c,r,i,D,y,F){return a(),n("div",null,t)}const u=s(e,[["render",p]]);export{h as __pageData,u as default};
