import{_ as s,o as a,c as n,V as o}from"./chunks/framework.7ae304b1.js";const C=JSON.parse('{"title":"Configuring Apps","description":"","frontmatter":{},"headers":[],"relativePath":"apps/configure.md","filePath":"apps/configure.md"}'),l={name:"apps/configure.md"},e=o(`<h1 id="configuring-apps" tabindex="-1">Configuring Apps <a class="header-anchor" href="#configuring-apps" aria-label="Permalink to &quot;Configuring Apps&quot;">​</a></h1><h2 id="service-mode-apps" tabindex="-1">Service mode apps <a class="header-anchor" href="#service-mode-apps" aria-label="Permalink to &quot;Service mode apps&quot;">​</a></h2><p>The &quot;random&quot; example was a very simple one, it was just a stateless function that is triggered every time you call it.</p><p>But there are so many other things you may want to do, that require a certain service running at all times.</p><p>For example imagine installing and running a StableDiffusion server. If we restarted StableDiffusion every time we made a request, it would be very slow. Instead, it&#39;s much more efficient to have a single StableDiffusion service running at all times, and have the service respond to the requests as they come in.</p><p>Some example use cases:</p><ol><li>AI server</li><li>Database server</li><li>Websocket server</li></ol><p>To accomplish this we need two things:</p><ol><li>An easy way to allow people to install and launch the service</li><li>An automated relaunch whenever Pinokio restarts (otherwise you will have to go through all these service modules and manually restart every tiem you restart Pinokio)</li></ol><h2 id="installer" tabindex="-1">Installer <a class="header-anchor" href="#installer" aria-label="Permalink to &quot;Installer&quot;">​</a></h2><p>In essence, an &quot;installation&quot; is nothing more than running some shell commands.</p><p>You can achieve this using the built-in <code>sh</code> (shell) API. Here&#39;s an example for installing Automatic1111 (a StableDiffusion client) on a Mac:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shell.run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">brew install cmake protobuf rust python@3.10 git wget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shell.run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui automatic1111</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shell.run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sh webui.sh -f --api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">automatic1111</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li>Runs <code>brew install</code> to install dependencies</li><li>Runs <code>git clone</code> to download the automatic1111 repository</li><li>Runs <code>sh webui.sh -f --api</code> to start the installer</li></ol><h2 id="dynamic-installer" tabindex="-1">Dynamic Installer <a class="header-anchor" href="#dynamic-installer" aria-label="Permalink to &quot;Dynamic Installer&quot;">​</a></h2><p>The problem with above script is that it only works on Mac.</p><p>For windows, or for linux, we need a different set of shell commands.</p><p>Fortunately we have multiple solutions for dynamically generating commands:</p><ol><li>Use the <a href="./../processor/decode.html#os">os</a> variable to determine the OS inside templates.</li><li>Or, instead of using JSON, we write a JavaScript file that exports JSON dynamically!</li></ol>`,19),p=[e];function t(r,c,i,D,F,y){return a(),n("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
