import{_ as s,o as a,c as e,V as l}from"./chunks/framework.7ae304b1.js";const D=JSON.parse('{"title":"JavaScript Shell API","description":"","frontmatter":{},"headers":[],"relativePath":"custom/shell.md","filePath":"custom/shell.md"}'),t={name:"custom/shell.md"},n=l(`<h1 id="javascript-shell-api" tabindex="-1">JavaScript Shell API <a class="header-anchor" href="#javascript-shell-api" aria-label="Permalink to &quot;JavaScript Shell API&quot;">​</a></h1><p>One of Pinokio&#39;s most powerful features is the <a href="/api/shell.html">Shell JSON-RPC API</a>, which lets you interact with the shell with nothing but JSON.</p><p>While the JSON-RPC API is already powerful and you should be able to achieve most of what you want using the JSON-RPC API, sometimes you may want more low level access to the shell.</p><p>Basically, instead of including the shell execution code in your JSON script (the &quot;frontend&quot;), you may want to write the shell manipulation logic in your custom API code (the &quot;backend&quot;).</p><h2 id="how-to-access" tabindex="-1">How to access <a class="header-anchor" href="#how-to-access" aria-label="Permalink to &quot;How to access&quot;">​</a></h2><p>The shell API is available at <code>kernel.shell</code> when writing your own custom API method:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomAPI</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">customMethod</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ondata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">kernel</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Access the JavaScript shell API with &quot;kernel.shell&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npm init</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to &quot;Modes&quot;">​</a></h2><p>There are two ways to use the shell:</p><ol><li><strong>Request/Response mode:</strong> Use it like a web server. Making a request creates a shell, runs the command, and returns the response. The created shell is destroyed at the end of the request.</li><li><strong>Persistent mode:</strong> Use it like a socket server, by creating a persistent connection and sending messages. The shell session is not destroyed until it encounters an event you specify.</li></ol><h2 id="_1-request-response-mode" tabindex="-1">1. Request/Response mode <a class="header-anchor" href="#_1-request-response-mode" aria-label="Permalink to &quot;1. Request/Response mode&quot;">​</a></h2><h3 id="shell-run" tabindex="-1">shell.run <a class="header-anchor" href="#shell-run" aria-label="Permalink to &quot;shell.run&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(params</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ondata)</span></span></code></pre></div><h4 id="parameters" tabindex="-1">parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;parameters&quot;">​</a></h4><ul><li><strong>params:</strong> shell request params</li><li><strong>options:</strong> optional <ul><li><strong>group:</strong> group id. used to group shell sessions, so they can be stopped later by group id.</li><li><strong>cwd:</strong> base path. if not specified, the cwd is set as ~/pinokio</li></ul></li></ul><h4 id="return-value" tabindex="-1">return value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;return value&quot;">​</a></h4><ul><li><strong>response:</strong> The full terminal text</li></ul><h2 id="_2-persistent-mode" tabindex="-1">2. Persistent mode <a class="header-anchor" href="#_2-persistent-mode" aria-label="Permalink to &quot;2. Persistent mode&quot;">​</a></h2><h3 id="shell-start" tabindex="-1">shell.start <a class="header-anchor" href="#shell-start" aria-label="Permalink to &quot;shell.start&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#A6ACCD;">(params</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span></code></pre></div><h4 id="parameters-1" tabindex="-1">parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;parameters&quot;">​</a></h4><ul><li><strong>params:</strong> shell request params</li><li><strong>options:</strong> optional <ul><li><strong>group:</strong> group id. used to group shell sessions, so they can be stopped later by group id.</li><li><strong>cwd:</strong> base path. if not specified, the cwd is set as ~/pinokio</li></ul></li></ul><h4 id="return-value-1" tabindex="-1">return value <a class="header-anchor" href="#return-value-1" aria-label="Permalink to &quot;return value&quot;">​</a></h4><ul><li><strong>id:</strong> The created shell id</li></ul><h3 id="shell-enter" tabindex="-1">shell.enter <a class="header-anchor" href="#shell-enter" aria-label="Permalink to &quot;shell.enter&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enter</span><span style="color:#A6ACCD;">(params</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ondata)</span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;parameters&quot;">​</a></h4><ul><li><strong>params:</strong> shell request params</li><li><strong>ondata:</strong> realtime callback that gets called for every shell event. Triggers the following event object: <ul><li><strong>id:</strong> The shell ID</li><li><strong>raw:</strong> Raw event string</li><li><strong>state</strong> The full terminal text when the event was triggered</li></ul></li></ul><h4 id="return-value-2" tabindex="-1">return value <a class="header-anchor" href="#return-value-2" aria-label="Permalink to &quot;return value&quot;">​</a></h4><ul><li><strong>response:</strong> The full terminal text</li></ul><h3 id="shell-write" tabindex="-1">shell.write <a class="header-anchor" href="#shell-write" aria-label="Permalink to &quot;shell.write&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(params</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ondata)</span></span></code></pre></div><h4 id="parameters-3" tabindex="-1">parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;parameters&quot;">​</a></h4><ul><li><strong>params:</strong> shell request params</li><li><strong>ondata:</strong> realtime callback that gets called for every shell event. Triggers the following event object: <ul><li><strong>id:</strong> The shell ID</li><li><strong>raw:</strong> Raw event string</li><li><strong>state</strong> The full terminal text when the event was triggered</li></ul></li></ul><h4 id="return-value-3" tabindex="-1">return value <a class="header-anchor" href="#return-value-3" aria-label="Permalink to &quot;return value&quot;">​</a></h4><ul><li><strong>response:</strong> The full terminal text</li></ul><h3 id="shell-stop" tabindex="-1">shell.stop <a class="header-anchor" href="#shell-stop" aria-label="Permalink to &quot;shell.stop&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> kernel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stop</span><span style="color:#A6ACCD;">(query)</span></span></code></pre></div><ul><li><strong>query</strong><ul><li><strong>id:</strong> stop a shell session by ID</li><li><strong>group:</strong> stop all shell sessions that belong to the group</li></ul></li></ul>`,39),o=[n];function r(p,i,c,h,u,d){return a(),e("div",null,o)}const g=s(t,[["render",r]]);export{D as __pageData,g as default};
