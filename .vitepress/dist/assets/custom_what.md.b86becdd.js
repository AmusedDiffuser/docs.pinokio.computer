import{_ as a,o as s,c as o,V as e}from"./chunks/framework.7ae304b1.js";const y=JSON.parse('{"title":"What is an API?","description":"","frontmatter":{},"headers":[],"relativePath":"custom/what.md","filePath":"custom/what.md"}'),t={name:"custom/what.md"},n=e(`<h1 id="what-is-an-api" tabindex="-1">What is an API? <a class="header-anchor" href="#what-is-an-api" aria-label="Permalink to &quot;What is an API?&quot;">​</a></h1><h2 id="local-first-api" tabindex="-1">Local first API <a class="header-anchor" href="#local-first-api" aria-label="Permalink to &quot;Local first API&quot;">​</a></h2><p>In Pinokio, APIs are local JavaScript classes that behave like remote servers.</p><p>It&#39;s easy to understand when we compare it to traditional APIs.</p><h2 id="traditional-api-vs-pinokio-api" tabindex="-1">Traditional API vs. Pinokio API <a class="header-anchor" href="#traditional-api-vs-pinokio-api" aria-label="Permalink to &quot;Traditional API vs. Pinokio API&quot;">​</a></h2><h3 id="traditional-api" tabindex="-1">Traditional API <a class="header-anchor" href="#traditional-api" aria-label="Permalink to &quot;Traditional API&quot;">​</a></h3><p>Here&#39;s an example &quot;traditional&quot; API request:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POST /test HTTP/1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">Host: foo.example</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Length: 27</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">field1=value1&amp;field2=value2</span></span></code></pre></div><p>Basically it&#39;s making a:</p><ol><li><strong>POST</strong> request</li><li>to the route <strong>/test</strong></li><li>at a remote server <strong>foo.example</strong></li><li>by passing the key value pairs <strong>field1=value1&amp;field2=value2</strong></li></ol><h3 id="pinokio-api" tabindex="-1">Pinokio API <a class="header-anchor" href="#pinokio-api" aria-label="Permalink to &quot;Pinokio API&quot;">​</a></h3><p>With Pinokio, all APIs exist locally.</p><p>Instead of making a request to a remote server, the API requests go to locally installed JavaScript modules.</p><p>Here&#39;s an example Pinokio request:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">uri</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/cocktailpeanut/sum.git/api.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">params</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Here&#39;s how it works:</p><ol><li>First download the JavaScript module at <code>https://github.com/cocktailpeanut/sum.git</code> (<strong>NOTE: the URI is used to DOWNLOAD the entire repository, not to make a reuqest to it</strong>)</li><li>Resolve the endpoint by importing the JavaScript module at <code>api.js</code></li><li>Look up the exported <code>sum()</code> inside the <code>api.js</code> file</li><li>Pass in the <code>params</code> to the resolved <code>sum()</code> method.</li><li>The <code>sum()</code> method does its job and returns a response.</li></ol><p>Basically, everything happens locally but it resembles a network request.</p><h2 id="building-a-custom-api" tabindex="-1">Building a custom API <a class="header-anchor" href="#building-a-custom-api" aria-label="Permalink to &quot;Building a custom API&quot;">​</a></h2><p>Therefore, building a custom API simply means writing a JavaScript module that follows a certain convention (will be explained in the following sections).</p><p>All you need to do is write a single JavaScript module while following the Pinokio JavaScript API convention, and you should be able to immediately start calling these API &quot;backends&quot; using JSON scripts.</p>`,21),l=[n];function i(p,r,c,d,u,h){return s(),o("div",null,l)}const D=a(t,[["render",i]]);export{y as __pageData,D as default};
