import{_ as i,o as a,c as s,C as e,a as o,t as n,V as t}from"./chunks/framework.7ae304b1.js";const l="/assets/library.24c06e82.png",A=JSON.parse('{"title":"File System","description":"","frontmatter":{},"headers":[],"relativePath":"fs/overview.md","filePath":"fs/overview.md"}'),r={name:"fs/overview.md"},d=t('<h1 id="file-system" tabindex="-1">File System <a class="header-anchor" href="#file-system" aria-label="Permalink to &quot;File System&quot;">​</a></h1><p><img src="'+l+'" alt="library.png"></p><h2 id="everything-is-a-file" tabindex="-1">Everything is a file <a class="header-anchor" href="#everything-is-a-file" aria-label="Permalink to &quot;Everything is a file&quot;">​</a></h2><p>Everything on Pinokio exists as a file.</p><h3 id="flat-file" tabindex="-1">Flat File <a class="header-anchor" href="#flat-file" aria-label="Permalink to &quot;Flat File&quot;">​</a></h3><p>The Pinokio world is made up of files. Everything can be expressed with files.</p><p>More specifically, Pinokio lets you express everything using flat <strong>JSON files</strong>:</p><ol><li><strong>Data:</strong> Data stored as JSON.</li><li><strong>Code:</strong> Code written in JSON (<a href="https://www.jsonrpc.org/specification" target="_blank" rel="noreferrer">JSON-RPC</a>).</li><li><strong>API:</strong> Automatically constructed API endpoints based on file path convention.</li><li><strong>UI:</strong> UI expressed in JSON (Autogenerated forms based on <a href="https://json-schema.org/" target="_blank" rel="noreferrer">JSON Schema</a>).</li><li><strong>Publishing:</strong> Because everything can be replicated deterministically through files, it becomes trivial to publish and share the AIs created using Pinokio. <ul><li>Publish to Git to version control and allow others to easily clone or fork</li><li>Publish to IPFS or BitTorrent for decentralized AI publishing.</li><li>etc.</li></ul></li></ol><h3 id="unix-philosophy" tabindex="-1">Unix Philosophy <a class="header-anchor" href="#unix-philosophy" aria-label="Permalink to &quot;Unix Philosophy&quot;">​</a></h3><p>The benefit of the <a href="https://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="noreferrer">&quot;Everything is a file&quot;</a> approach is explained here:</p><blockquote><p>Everything is a file is an idea that Unix, and its derivatives, handle input/output to and from resources such as documents, hard-drives, modems, keyboards, printers and even some inter-process and network communications as simple streams of bytes exposed through the filesystem name space. ... The advantage of this approach is that the same set of tools, utilities and APIs can be used on a wide range of resources and a number of file types. When a file is opened, a file descriptor is created, using the file path as an addressing system. The file descriptor is then a byte stream I/O interface on which file operations are performed</p><p><a href="https://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="noreferrer">https://en.wikipedia.org/wiki/Everything_is_a_file</a></p></blockquote><p>Pinokio follows the same philosophy and enjoys the same benefits.</p><h3 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h3>',13),h=e("li",null,[e("strong",null,"Shareable:"),o(" Because all you need is JSON, it is not only easy to build complex workflows, but also easy to share the workflows, simply by publishing the files (to git, etc).")],-1),c=e("li",null,[e("strong",null,"Self-contained:"),o(" Because everything (not just data, but also code) is stored and executed as a file, Pinokio does not have any dependency on some 3rd party system. You can build and publish a completely self contained archive of workflows and applications as a single file or a folder.")],-1),p=e("li",null,[e("strong",null,"Natively Modular:"),o(" Everything existing as a file makes it easy to automatically separate a monolithic application (expressed in a single JSON file) out into multiple files (also expressed in JSON files)")],-1),u=e("strong",null,"Dynamic data powered by templates:",-1),f=e("li",null,[e("strong",null,"Simplified Application Development:"),o(" No complex configuration is needed for building applications. Simply write some JSON or JavaScript files and drop them under the project folder, and the app constructs itself.")],-1),m=e("li",null,[e("strong",null,"Cross platform:"),o(" The flat file format makes it trivial to run the same logic on multiple different platforms.")],-1),g=e("li",null,[e("strong",null,"Easily extensible:"),o(" The native JSON file format makes it easy to extend APIs and applications simply by modifying the JSON attributes.")],-1),y=t(`<h3 id="json-protocol" tabindex="-1">JSON Protocol <a class="header-anchor" href="#json-protocol" aria-label="Permalink to &quot;JSON Protocol&quot;">​</a></h3><p>It is important to note that Pinokio uses JSON not just for storing data and code, but also as the native protocol.</p><p>In addition to everything from data to code being stored as JSON, Pinokio can use JSON to integrate and and comunicate with ANY external processes and remote APIs. Some examples:</p><ol><li><strong>Run any python script:</strong> To communicate with a python process, simply write a JSON file from the python process, or print JSON to stdout from the python script, and process the terminal stream using the <a href="./../apps/shell.html">Pinokio Shell Interface</a></li><li><strong>Call any external process:</strong> Going one step further, it&#39;s not just python you can run. If you can run something manually, Pinokio can automate it with a simple <a href="./../api/shell.html">sh RPC</a>, or utilize the <a href="./../apps/shell.html">Pinokio Shell Interface</a> for more low level access and stream processing.</li><li><strong>Call external servers:</strong> JSON is the most popular data transmission format for most APIs. You can communicate with any external API using the <a href="./../api/networking.html">net API</a> and seamlessly incorporate it into applications.</li></ol><h2 id="home-directory" tabindex="-1">Home directory <a class="header-anchor" href="#home-directory" aria-label="Permalink to &quot;Home directory&quot;">​</a></h2><p>Pinokio stores everything inside the <code>pinokio</code> folder under the user home directory (<code>~/pinokio</code>).</p><p>Example:</p><ul><li><strong>windows:</strong> <code>C:\\Users\\&lt;username&gt;\\pinokio</code></li><li><strong>linux:</strong> <code>/home/&lt;username&gt;/pinokio</code></li><li><strong>mac:</strong> <code>/Users/&lt;username&gt;/pinokio</code></li></ul><h2 id="folder-structure" tabindex="-1">Folder structure <a class="header-anchor" href="#folder-structure" aria-label="Permalink to &quot;Folder structure&quot;">​</a></h2><p>The top level directories look like the following:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">~/</span></span>
<span class="line"><span style="color:#A6ACCD;">  /pinokio</span></span>
<span class="line"><span style="color:#A6ACCD;">    /api    # (~/pinokio/api) stores the user installed files</span></span>
<span class="line"><span style="color:#A6ACCD;">    /bin    # (~/pinokio/bin) stores binary files, such as cmake, git, python, etc.</span></span></code></pre></div><h3 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h3><p>The <code>bin</code> folder stores all the binaries commonly used by AI engines. Currently includes:</p><ul><li><strong>python</strong> (and <code>pip</code>)</li><li><strong>node.js</strong> (and <code>npm</code>)</li><li><strong>git</strong> (only on windows for now, since mac and linux mostly ships with git)</li><li><strong>cmake</strong> used for building C projects</li><li>more coming soon (please request if you need something)</li></ul><h3 id="api" tabindex="-1">api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;api&quot;">​</a></h3><p>The <code>api</code> folder is where the user downloaded repositories are stored. An API folder can contain either of the following:</p><ol><li><strong>downloaded from git:</strong> repositories you downloaded from git.</li><li><strong>locally created:</strong> you can manually create folders and work from there.</li></ol>`,17);function b(_,k,w,v,P,S){return a(),s("div",null,[d,e("ol",null,[h,c,p,e("li",null,[u,o(" Since everything is stored as a flat file, we can implement dynamic data simply by incorporating template expressions in those files ("),e("code",null,n(),1),o("), and they are all automatically decoded at runtime.")]),f,m,g]),y])}const N=i(r,[["render",b]]);export{A as __pageData,N as default};
