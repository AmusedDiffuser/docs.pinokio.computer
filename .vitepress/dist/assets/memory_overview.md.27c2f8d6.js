import{_ as e,o as t,c as a,V as r}from"./chunks/framework.7ae304b1.js";const i="/assets/vacuum.69d7e308.jpeg",v=JSON.parse('{"title":"Memory","description":"","frontmatter":{},"headers":[],"relativePath":"memory/overview.md","filePath":"memory/overview.md"}'),o={name:"memory/overview.md"},s=r('<h1 id="memory" tabindex="-1">Memory <a class="header-anchor" href="#memory" aria-label="Permalink to &quot;Memory&quot;">â€‹</a></h1><p>As a pinokio script gets executed step by step, you can update the memory so it can be used in later steps.</p><p><img src="'+i+'" alt="vacuum.jpeg"></p><ol><li><a href="./input.html">Input</a>: (readonly) The value passed in from the previous step in the script.</li><li><a href="./local.html">Local variable</a>: (read and write) An in-memory variable that gets reset every time a Pinokio script finishes running. Sandboxed to the current script namespace.</li><li><a href="./global.html">Global variable</a>: (read and write) An in-memory variable that persists as long as Pinokio is running. When you restart Pinokio, it gets wiped out. To reset a global variable without restarting Pinokio, you can use the <a href="./../api/datastructure.html#global-variable-1">rm</a> API to reset the value.</li><li><a href="./self.html">Self</a>: (read and write) Variables that are accessible from memory, but also persisted to the file system. Will NOT be reset even when Pinokio restarts, since everything is stored in a file.</li></ol>',4),n=[s];function l(m,c,h,p,d,u){return t(),a("div",null,n)}const f=e(o,[["render",l]]);export{v as __pageData,f as default};
